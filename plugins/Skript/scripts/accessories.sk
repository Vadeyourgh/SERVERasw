 


command /accessories:
	aliases: accessory, accesory, accesories, gear, mygear, playergear, trinkets
	permission: core.accessories
	trigger:
		OpenAccessoriesMenu(sender)



function OpenAccessoriesMenu(player: player):
	play sound "item.armor.equip_diamond" with volume 0.8 and pitch 1.5 to {_player}
	set metadata tag "accessories_menu" of {_player} to chest inventory with 3 rows named "Ô†∂&fÓÅ£"
	set slot 0 of metadata tag "accessories_menu" of {_player} to stick with custom model data 1 named "&c‚Üê Previous Menu"

	set slot 11 of metadata tag "accessories_menu" of {_player} to {accessories::%uuid of {_player}%::items::1}
	set slot 15 of metadata tag "accessories_menu" of {_player} to {accessories::%uuid of {_player}%::items::2}
	set slot 21 of metadata tag "accessories_menu" of {_player} to {accessories::%uuid of {_player}%::items::3}
	set slot 23 of metadata tag "accessories_menu" of {_player} to {accessories::%uuid of {_player}%::items::4}

	loop 8 times:
		set slot 0 + loop-number of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	set slot 9 of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	set slot 10 of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	loop 3 times:
		set slot 11 + loop-number of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	set slot 16 of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	set slot 17 of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	loop 3 times:
		set slot 17 + loop-number of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	set slot 22 of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "
	loop 3 times:
		set slot 23 + loop-number of metadata tag "accessories_menu" of {_player} to stick with custom model data 100 named " "

	set {_stats_item} to stick with custom model data 100 named "<##31ed96>Your Stats"
	set line 2 of lore of {_stats_item} to "<##b12222>üó° Strength &f%placeholder "aureliumskills_strength_int" from {_player}%"
	set line 3 of lore of {_stats_item} to "<##df5252>‚ù§ Health &f%placeholder "aureliumskills_health_int" from {_player}%"
	set line 4 of lore of {_stats_item} to "<##f2601c>üçñ Regeneration &f%placeholder "aureliumskills_regeneration_int" from {_player}%"
	set line 5 of lore of {_stats_item} to "<##4cb61b>ÓÑÖ Luck &f%placeholder "aureliumskills_luck_int" from {_player}%"
	set line 6 of lore of {_stats_item} to "<##6586e8>ÓÑÜ Wisdom &f%placeholder "aureliumskills_wisdom_int" from {_player}%"
	set line 7 of lore of {_stats_item} to "<##58d09c>üõ° Toughness &f%placeholder "aureliumskills_toughness_int" from {_player}%"
	set line 8 of lore of {_stats_item} to "<##c649e6>‚åò Crit Chance &f%placeholder "aureliumskills_crit_chance_int" from {_player}%"
	set line 9 of lore of {_stats_item} to "<##db2e76>‚òÖ Crit Damage &f%placeholder "aureliumskills_speed_int" from {_player}%"
	set line 10 of lore of {_stats_item} to "&fÓêÖ Speed &f%placeholder "aureliumskills_speed_int" from {_player}%"
	set slot 3 of metadata tag "accessories_menu" of {_player} to {_stats_item}
	set slot 4 of metadata tag "accessories_menu" of {_player} to {_stats_item}
	set slot 5 of metadata tag "accessories_menu" of {_player} to {_stats_item}
	set slot 13 of metadata tag "accessories_menu" of {_player} to {_stats_item}

	set {_about} to stick with custom model data 11 named "<##31ed96>About Gear"
	set line 2 of lore of {_about} to "&7You can equip yourself with"
	set line 3 of lore of {_about} to "&7up to <##8f64de>4 ·¥Ä·¥Ñ·¥Ñ·¥áss·¥è Ä è <##8f64de>…™·¥õ·¥á·¥çs"
	set line 4 of lore of {_about} to "&7to become more powerful."
	set line 6 of lore of {_about} to "&7Accessory items can be dropped from"
	set line 7 of lore of {_about} to "&7monsters in the &2Overworld &7and <##f74154>Dungeons."
	set line 8 of lore of {_about} to "&7You can also craft and upgrade"
	set line 9 of lore of {_about} to "&7accessories in &6The Forge."
	set slot 8 of metadata tag "accessories_menu" of {_player} to {_about}



	open (metadata tag "accessories_menu" of {_player}) to {_player}






on inventory click:
	if player's current inventory is (metadata tag "backpack_inventory" of player):


		#	Prevent player from losing his backpack
#		loop all items in player's current inventory:
#			if loop-item is a stick:
#				loop {forge::backpacks_list::*}:
#					if custom model data of loop-item-1 is {forge::item::%loop-value-2%::custom_model_data}:
#						set {_item} to loop-item-1
#						remove loop-item-1 from player's current inventory
	#					give {_item} to player

		#	Prevent player from misplacing backpack (anti-dupe)
		if player's tool is a stick:
			loop {forge::backpacks_list::*}:
				if custom model data of player's tool is {forge::item::%loop-value%::custom_model_data}:
					set {_pass} to true
					exit loop
		if {_pass} is not true:
			close the inventory of player
			stop

		#	Save inventory every click
		set {_n} to nbt compound of player's tool
		loop all items in player's current inventory:
			set {_index} to index of loop-slot
			set {_item} to full nbt of loop-item
			set {_items::%{_index}%} to nbt from "{slot:%{_index}%b,item:%{_item}%}"
		set compound list tag "items" of {_n} to {_items::*}

		#	Prevent player from touching backpacks while in backpack menu (anti-dupe)
		if event-item is stick:
			loop {forge::backpacks_list::*}:
				if custom model data of event-item is {forge::item::%loop-value%::custom_model_data}:
					set {_n} to nbt compound of event-item
					if "%{_n}%" contains "item_id":
						cancel event
						exit loop


		
		wait 1 tick
		loop all items in player's current inventory:
			if loop-item is a stick:
				loop {forge::backpacks_list::*}:
					if custom model data of loop-item-1 is {forge::item::%loop-value-2%::custom_model_data}:
						set {_bp_item} to loop-item-1
						remove loop-item-1 from player's current inventory
						give {_bp_item} to player
						exit loop
		if {_bp_item} is set:
			if player's tool is not a stick:
				loop {forge::backpacks_list::*}:
					if custom model data of player's tool is not {forge::item::%loop-value-2%::custom_model_data}:
						remove player's tool from player



		#	Save inventory every click
#		set {_n} to nbt compound of {_item}
#		loop all items in player's current inventory:
#			set {_index} to index of loop-slot
#			set {_item} to full nbt of loop-item
#			set {_items::%{_index}%} to nbt from "{slot:%{_index}%b,item:%{_item}%}"
#		set compound list tag "items" of {_n} to {_items::*}





	if player's current inventory is (metadata tag "accessories_menu" of player):
		if event-slot is stick:
			if name of event-slot is " " or "<##31ed96>Your Stats" or "<##31ed96>About Gear":
				cancel event
		if name of event-slot is "&c‚Üê Previous Menu":
			cancel event
			close the player's inventory
			execute player command "cp main_menu"

		wait 2 tick
		if player's current inventory is (metadata tag "accessories_menu" of player):
			if slot 11 of player's current inventory is not air:
				set {_item::1} to item in slot 11 of player's current inventory
			if slot 15 of player's current inventory is not air:
				set {_item::2} to item in slot 15 of player's current inventory
			if slot 21 of player's current inventory is not air:
				set {_item::3} to item in slot 21 of player's current inventory
			if slot 23 of player's current inventory is not air:
				set {_item::4} to item in slot 23 of player's current inventory


			if lore of {_item::1} does not contain "<##8f64de>·¥Ä·¥Ñ·¥Ñ·¥áss·¥è Ä è …™·¥õ·¥á·¥ç":
				if player has space for {_item::1}:
					give {_item::1} to player
				else:
					drop {_item::1} at player
				set slot 11 of player's current inventory to air
			if lore of {_item::2} does not contain "<##8f64de>·¥Ä·¥Ñ·¥Ñ·¥áss·¥è Ä è …™·¥õ·¥á·¥ç":
				if player has space for {_item::2}:
					give {_item::2} to player
				else:
					drop {_item::2} at player
				set slot 15 of player's current inventory to air
			if lore of {_item::3} does not contain "<##8f64de>·¥Ä·¥Ñ·¥Ñ·¥áss·¥è Ä è …™·¥õ·¥á·¥ç":
				if player has space for {_item::3}:
					give {_item::3} to player
				else:
					drop {_item::3} at player
				set slot 21 of player's current inventory to air
			if lore of {_item::4} does not contain "<##8f64de>·¥Ä·¥Ñ·¥Ñ·¥áss·¥è Ä è …™·¥õ·¥á·¥ç":
				if player has space for {_item::4}:
					give {_item::4} to player
				else:
					drop {_item::4} at player
				set slot 23 of player's current inventory to air





every 5 seconds:
	if {players::*} is set:
		loop {players::*}:
			RefreshAccessories5(loop-value)

function RefreshAccessories5(player: player):
	loop 5 times:
		RefreshAccessories({_player})
		wait 1 second





function RefreshAccessories(player: player):


	#	Aurelium Skills Stats
	set {_strength} to 0
	set {_health} to 0
	set {_regeneration} to 0
	set {_luck} to 0
	set {_wisdom} to 0
	set {_toughness} to 0

	set {_stats::*} to "strength" and "health" and "regeneration" and "luck" and "wisdom" and "toughness"


	#	Custom Bonuses
	set {_movement_speed} to 0
	set {_fuel} to 0
	set {_oxygen} to 0
	delete {_night_vision}
	delete {_haste}

	add "movement_speed" and "fuel" and "oxygen" and "night_vision" and "haste" to {_stats::*}



	#	Check Gear and add up stats
	loop 4 times:
		if GetAccessorySlot({_player}, loop-number) is set:
			set {_item} to GetAccessorySlot({_player}, loop-number)
				
			#	Grab item stats
			loop {_stats::*}:
				if {forge::item::%{_item}%::%loop-value-2%} is set:
					if {forge::item::%{_item}%::%loop-value-2%} is a number:
						#	Handling fuel separately, since its effects cannot stack:
						if loop-value-2 is "fuel":
							if {_fuel} > 0:
								if {forge::item::%{_item}%::%loop-value-2%} > {_%loop-value-2%}:
									set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}
							else:
								set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}
						#	Handling numbers:
						else:
							add {forge::item::%{_item}%::%loop-value-2%} to {_%loop-value-2%}
					#	Handling non numerical stats (example: night vision, haste)
					else:
						set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}



	#	Applying Stats


	#	Aurelium Skill Stats:
	set {_basic_stats::*} to "strength" and "health" and "regeneration" and "luck" and "wisdom" and "toughness"

	loop {_basic_stats::*}:
		set {_stat} to loop-value
		if metadata value "%{_stat}%" of {_player} is not {_%{_stat}%}:
			set metadata value "%{_stat}%" of {_player} to {_%{_stat}%}
			execute console command "sk modifier remove %{_player}% accessory_%{_stat}%"
			if {_%{_stat}%} is not 0:
				execute console command "sk modifier add %{_player}% %{_stat}% accessory_%{_stat}% %{_%{_stat}%}%"


	#	Night Vision
	if {_night_vision} is true:
		if {_player}'s gamemode is not creative:
			remove night vision from {_player}
			apply potion of night vision without any particles to {_player} for 1 day
			set metadata value "night_vision" of {_player} to true
	else:
		if metadata value "night_vision" of {_player} is true:
			remove night vision from {_player}
			delete metadata value "night_vision" of {_player}

	#	Haste
	if {_haste} is true:
		if {_player}'s gamemode is not creative:
			remove haste from {_player}
			apply potion of haste without any particles to {_player} for 1 day
			set metadata value "haste" of {_player} to true
	else:
		if metadata value "haste" of {_player} is true:
			remove haste from {_player}
			delete metadata value "haste" of {_player}


	#	Oxygen
	if {_oxygen} is set:
		if metadata value "submerged" of {_player} is true:
			if {_player} is not in water:
				delete metadata value "submerged" of {_player}
				remove water breathing from {_player}
		else:
			if {_player} is in water:
				set metadata value "submerged" of {_player} to true
				apply potion of water breathing without any particles to {_player} for Time("%{_oxygen}% seconds")


	#	Movement Speed
	set {_player}'s walk speed to 0.2 + 0.002*{_movement_speed}


	#	Flight
	if {_fuel} > 0:
		AccessoryFlightCheck({_player}, {_fuel})







function GetAccessorySlot(player: player, slot: integer) :: string:
	loop {forge::accessories_list::*}:
		if {accessories::%uuid of {_player}%::items::%{_slot}%} is {item::%loop-value%}:
			return "%loop-value%"





function AccessoryFlightCheck(player: player, fuel: integer):
	if {_player}'s world contains "dungeons":
		stop
	loop 10 times:
		if {_player} is not flying:
			if {_player} is sneaking:
				if metadata value "fuel" of {_player} > 0:
					push {_player} upwards with speed 0.2
					push {_player} forward with speed 0.04
					set metadata value "fuel" of {_player} to metadata value "fuel" of {_player} - 1
					play sound "item.bucket.empty_lava" with volume 0.3 and pitch 2 at {_player}
					draw 5 flame at {_player} with offset vector(0, 0, 0) with extra 0.2

		if {_player} is on ground:
			set metadata value "fuel" of {_player} to {_fuel}

		wait 0.1 second





















