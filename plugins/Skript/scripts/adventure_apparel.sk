on load:
	BacktoolsReload()


on step on end portal:
	set metadata value "tp_date" of player to now
	set metadata value "tp_cooldown" of player to 5 seconds
	KillBacktool(player)

on step on end portal block:
	set metadata value "tp_date" of player to now
	set metadata value "tp_cooldown" of player to 5 seconds
	KillBacktool(player)

on step on end gateway:
	set metadata value "tp_date" of player to now
	set metadata value "tp_cooldown" of player to 5 seconds
	KillBacktool(player)

on step on obsidian:
	if block above event-block is nether portal block:
		set metadata value "tp_date" of player to now
		set metadata value "tp_cooldown" of player to 5 seconds
		KillBacktool(player)

command /adventureapparelreload:
	aliases: btreload, bpreload, backtoolsreload, aareload, apreload, advappreload
	permission: admin
	trigger:
		BacktoolsReload()
		send "&f &fAdventure Apparel's config file has been reloaded!" to sender


function BacktoolsReload():
	load yaml "unlimited_adventures/AdventureApparel/config.yml" as "config"
	if yaml value "version" from "config" is not set:
		wait 1 tick
		BacktoolsCreateConfigFile()


	if yaml value "enabled" from "config" is set:
		set {backtools::config::enabled} to yaml value "enabled" from "config"
		set {backtools::config::enabled::swords} to yaml value "swords-enabled" from "config"
		set {backtools::config::enabled::axes} to yaml value "axes-enabled" from "config"
		set {backtools::config::enabled::pickaxes} to yaml value "pickaxes-enabled" from "config"
		set {backtools::config::enabled::shovels} to yaml value "shovels-enabled" from "config"
		set {backtools::config::enabled::hoes} to yaml value "hoes-enabled" from "config"
		set {backtools::config::teleport_commands::*} to yaml list "teleport-commands" from "config"


	save yaml "config"


function BacktoolsCreateConfigFile():
	load yaml "unlimited_adventures/AdventureApparel/config.yml" as "config"

	set yaml value "version" from "config" to 1
	set the comments of yaml node "version" from "config" to "Please DO NOT change version number!"

	set yaml value "enabled" from "config" to true
	set yaml value "swords-enabled" from "config" to true
	set yaml value "axes-enabled" from "config" to true
	set yaml value "pickaxes-enabled" from "config" to true
	set yaml value "shovels-enabled" from "config" to true
	set yaml value "hoes-enabled" from "config" to true

	set yaml list "teleport-commands" from "config" to "teleport" and "tp" and "tp2p" and "warp" and "tpa" and "tpask" and "back" and "spawn" and "unstuck" and "ascend" and "asc" and "descend" and "desc" and "jumpto" and "jump" and "j" and "thru" and "home"


	set the comments of yaml node "enabled" from "config" to "Should the Adventure Apparel be enabled?"
	set the comments of yaml node "swords-enabled" from "config" to "You can specify which items will be visible on the player model." and "Disabled items will be ignored by the system."
	set the comments of yaml node "teleport-commands" from "config" to "Due to Spigot limitations, players cannot teleport while Adventure Apparel is enabled." and "I have created a workaround, which will allow players to teleport, but the teleport command must be known to the system." and "Commands from Essentials are handled by default." and "Please write down all teleport commands that your server is using:"
	save yaml "config"





function GetHotbarItem(player: player, slot: integer) :: item:
	set {_item} to slot {_slot} of {_player}
	if {_item} is any sword or any axe or any pickaxe or any shovel or any hoe:
		return {_item}

function GetToolModelData(item: item) :: integer:
	
	#	Swords
	if {backtools::config::enabled::swords} is true:
		if {_item} is any sword:
			if {_item} is wood sword:
				set {_model_number} to 1
			if {_item} is stone sword:
				set {_model_number} to 2
			if {_item} is iron sword:
				set {_model_number} to 3
			if {_item} is golden sword:
				set {_model_number} to 4
			if {_item} is diamond sword:
				set {_model_number} to 5
			if {_item} is netherite sword:
				set {_model_number} to 6
			if custom model data of {_item} is 730:
				set {_model_number} to 7
			if custom model data of {_item} is 731:
				set {_model_number} to 8
			if custom model data of {_item} is 732:
				set {_model_number} to 9


	#	Axes
	if {backtools::config::enabled::axes} is true:
		if {_item} is any axe:
			if {_item} is wooden axe:
				set {_model_number} to 11
			if {_item} is stone axe:
				set {_model_number} to 12
			if {_item} is iron axe:
				set {_model_number} to 13
			if {_item} is golden axe:
				set {_model_number} to 14
			if {_item} is diamond axe:
				set {_model_number} to 15
			if {_item} is netherite axe:
				set {_model_number} to 16
			if custom model data of {_item} is 732:
				set {_model_number} to 17
			if custom model data of {_item} is 733:
				set {_model_number} to 18

	#	Pickaxes
	if {backtools::config::enabled::pickaxes} is true:
		if {_item} is any pickaxe:
			if {_item} is wooden pickaxe:
				set {_model_number} to 21
			if {_item} is stone pickaxe:
				set {_model_number} to 22
			if {_item} is iron pickaxe:
				set {_model_number} to 23
			if {_item} is golden pickaxe:
				set {_model_number} to 24
			if {_item} is diamond pickaxe:
				set {_model_number} to 25
			if {_item} is netherite pickaxe:
				set {_model_number} to 26
			if custom model data of {_item} is 733:
				set {_model_number} to 27

	#	Shovels
	if {backtools::config::enabled::shovels} is true:
		if {_item} is wooden shovel:
			set {_model_number} to 31
		if {_item} is stone shovel:
			set {_model_number} to 32
		if {_item} is iron shovel:
			set {_model_number} to 33
		if {_item} is golden shovel:
			set {_model_number} to 34
		if {_item} is diamond shovel:
			set {_model_number} to 35
		if {_item} is netherite shovel:
			set {_model_number} to 36

	#	Hoes
	if {backtools::config::enabled::hoes} is true:
		if {_item} is wooden hoe:
			set {_model_number} to 41
		if {_item} is stone hoe:
			set {_model_number} to 42
		if {_item} is iron hoe:
			set {_model_number} to 43
		if {_item} is golden hoe:
			set {_model_number} to 44
		if {_item} is diamond hoe:
			set {_model_number} to 45
		if {_item} is netherite hoe:
			set {_model_number} to 46


	if {_item} is bow:
		set {_model_number} to 51



	return {_model_number}


function GetBackpackModelData(backpack: string) :: integer:
	
	if {forge::item::%{_backpack}%::model_custom_model_data} is set:
		set {_model_number} to {forge::item::%{_backpack}%::model_custom_model_data}

	return {_model_number}


every second:
	loop {players::*}:
		GetPlayerBackpack(loop-value)
		LoopRefreshBacktools(loop-value)


function GetToolbelt(player: player) :: item:
	delete {_hotbar_item::*}

	#	Get all hotbar slots
	loop 9 times:
		if GetHotbarItem({_player}, (loop-number)-1) is set:
			if (loop-number)-1 is not index of {_player}'s selected hotbar slot:
				add GetHotbarItem({_player}, (loop-number)-1) to {_hotbar_item::*}

	return first element of {_hotbar_item::*}



function GetPlayerBackpack(player: player):
	delete metadata value "backpack" of {_player}
	loop all items in {_player}'s inventory:
		if loop-item is a stick:
			loop {forge::backpacks_list::*}:
				if custom model data of loop-item is {forge::item::%loop-value-2%::custom_model_data}:
					set metadata value "backpack" of {_player} to loop-value-2
					exit loop



function GetBackpack(player: player) :: string:
	
	set {_backpack} to metadata value "backpack" of {_player}
#	send "backpack: %{_backpack}%" to {_player}

	if {_player}'s tool is stick:
		if custom model data of {_player}'s tool is {forge::item::%{_backpack}%::custom_model_data}:
#		send "stop %{forge::item::%{_backpack}%::name}%" to {_player}
			stop

	if {_backpack} is set:
		return {_backpack}



function LoopRefreshBacktools(player: player):
	loop 10 times:
		RefreshBacktools({_player})
		wait 2 ticks




#		Odświeżanie Pasa oraz Plecaka




function KillBacktool(player: player):
#	if {_player} is not "MadPanCakey":
#		send "Toolbelt: %metadata value "toolbelt" of {_player}%" to all players
	if metadata value "toolbelt" of {_player} is set:
		set {_loc} to location of metadata value "toolbelt" of {_player}
		if chunk at {_loc} is not loaded:
			kill metadata value "toolbelt" of {_player}
			delete metadata value "toolbelt" of {_player}
			async load chunk at {_loc}
		kill metadata value "toolbelt" of {_player}
		delete metadata value "toolbelt" of {_player}



function SpawnBacktool(player: player):
	
	if metadata value "toolbelt" of {_player} is alive:
		KillBacktool({_player})

	if {_player} is not online:
		stop

	set {_nbt} to nbt compound from "{}"
	set byte tag "Invisible" of {_nbt} to 1
	set byte tag "Marker" of {_nbt} to 1
#	set tag "Persistent" of {_nbt} to false

	spawn armor stand at {_player} with nbt {_nbt}

	set {_stand} to last spawned armor stand
	set metadata value "toolbelt::owner" of {_stand} to "%{_player}%"
	set metadata value "toolbelt::item" of {_stand} to {_tool}
	set metadata value "toolbelt::backpack" of {_stand} to {_backpack}
	set metadata value "toolbelt" of {_player} to last spawned armor stand

	set {_tool} to GetToolbelt({_player})
	set {_backpack} to GetBackpack({_player})

	if GetToolModelData({_tool}) is set:
		if {_tool} is enchanted:
			set offhand tool of the last spawned armor stand to feather of fortune 1 with custom model data GetToolModelData({_tool})
		else:
			set offhand tool of the last spawned armor stand to feather with custom model data GetToolModelData({_tool})
	if GetBackpackModelData({_backpack}) is set:
		set helmet of the last spawned armor stand to feather with custom model data GetBackpackModelData({_backpack})

	make {_stand} ride {_player}






function RefreshBacktools(player: player):

	set {_tool} to GetToolbelt({_player})
	set {_backpack} to GetBackpack({_player})
#	send "%{_backpack}%" to {_player}

	#	Backtools wyłączone? = stopuj kod
	if {backtools::config::enabled} is false:
		if metadata value "toolbelt" of {_player} is set:
			KillBacktool({_player})
		stop

	if {_player} is swimming:
		KillBacktool({_player})
		stop
	if {_player}'s chestplate is elytra:
		KillBacktool({_player})
		stop


	if metadata value "tp_cooldown" of {_player} is set:
		if difference between metadata value "tp_date" of {_player} and now > metadata value "tp_cooldown" of {_player}:
			SpawnBacktool({_player})
			delete metadata value "tp_date" of {_player}
			delete metadata value "tp_cooldown" of {_player}
		else:
			KillBacktool({_player})
			stop



	if metadata value "toolbelt" of {_player} is set:
		set {_stand} to metadata value "toolbelt" of {_player}

		#	Za duża rotacja = usuń armor stand
		
		if difference between yaw of {_stand} and yaw of {_player} > 30:
			teleport {_stand} to location of {_player}
			make {_stand} ride {_player}

		#	Ustaw model toolbelt i backpack
		if {_tool} is set:
			if metadata value "toolbelt::item" of {_stand} is not {_tool}:
				set metadata value "toolbelt::item" of {_stand} to {_tool}
				if {_tool} is enchanted:
					set offhand tool of {_stand} to feather of fortune 1 with custom model data GetToolModelData({_tool})
				else:
					set offhand tool of {_stand} to feather with custom model data GetToolModelData({_tool})
		else:
			delete metadata value "toolbelt::item" of {_stand}
			set offhand tool of {_stand} to air

		if {_backpack} is set:
			if metadata value "toolbelt::backpack" of {_stand} is not {_backpack}:
				set metadata value "toolbelt::backpack" of {_stand} to {_backpack}
				set helmet of {_stand} to feather with custom model data GetBackpackModelData({_backpack})
		else:
			delete metadata value "toolbelt::backpack" of {_stand}
			set helmet of {_stand} to air

		#	Usuń niepotrzebny armor stand
		if metadata value "toolbelt::item" of {_stand} is not set:
			if metadata value "toolbelt::backpack" of {_stand} is not set:
				KillBacktool({_player})

		if {_player} is not online:
			KillBacktool({_player})
			stop
		if {_player} is not alive:
			KillBacktool({_player})
			stop

	else:
		if {_tool} is not set:
			if {_backpack} is not set:
				stop
		SpawnBacktool({_player})



on held item change:
	if GetToolbelt(player) is not set:
		if GetBackpack(player) is not set:
			stop
	RefreshBacktools(player)





on command:
	if {backtools::config::enabled} is false:
		stop
	if full command contains "mv tp":
		KillBacktool(player)
		set metadata value "tp_date" of player to now
		set metadata value "tp_cooldown" of player to 1 second
	loop {backtools::config::teleport_commands::*}:
		if command contains loop-value:
			set metadata value "tp_date" of player to now
			set metadata value "tp_cooldown" of player to 1 second
			KillBacktool(player)
			exit loop


on skript stop:
	kill metadata value "toolbelt" of all players
	delete metadata value "toolbelt" of all players



command /killbp:
	permission: admin
	trigger:
		KillBacktool(player)






































#
#		Backpacks
#



on right click holding stick:
	if custom model data of player's tool is set:
		loop {forge::items_list::*}:
			if {forge::item::%loop-value%::rows} is set:
				if custom model data of player's tool is {forge::item::%loop-value%::custom_model_data}:
					cancel event
					BackpackOpen(player, loop-value)
					exit loop


function BackpackOpen(player: player, backpack: string):
	if {_player}'s tool is not stick:
		stop

	set metadata tag "backpack_inventory" of {_player} to chest inventory with {forge::item::%{_backpack}%::rows} rows named {forge::item::%{_backpack}%::name}

	set metadata value "backpack_item" of {_player} to {_player}'s tool
	set {_n} to nbt compound of {_player}'s tool
	set {_bp_items::*} to compound list tag "items" of {_n}


	loop {_bp_items::*}:
		set {_value} to loop-value
		set {_slot} to byte tag "slot" of {_value}
		set {_item} to compound tag "item" of {_value}
		set {_item} to item from nbt {_item}
		set slot {_slot} of metadata tag "backpack_inventory" of {_player} to {_item}

	open (metadata tag "backpack_inventory" of {_player}) to {_player}

	loop all items in {_player}'s current inventory:
		if loop-item is a stick:
			loop {forge::backpacks_list::*}:
				if custom model data of loop-item-1 is {forge::item::%loop-value-2%::custom_model_data}:
					set {_item} to loop-item-1
					remove loop-item-1 from {_player}'s current inventory
					give {_item} to {_player}



on inventory close:
	set {_player} to player

	if event-inventory is (metadata tag "backpack_inventory" of {_player}):
		set {_n} to nbt compound of {_player}'s tool #metadata value "backpack_item" of {_player}
		loop all items in {_player}'s current inventory:
			set {_index} to index of loop-slot
			set {_item} to full nbt of loop-item
			set {_items::%{_index}%} to nbt from "{slot:%{_index}%b,item:%{_item}%}"
		set compound list tag "items" of {_n} to {_items::*}


	if event-inventory is (metadata tag "accessories_menu" of {_player}):
		set {accessories::%uuid of {_player}%::items::1} to slot 11 of {_player}'s current inventory
		set {accessories::%uuid of {_player}%::items::2} to slot 15 of {_player}'s current inventory
		set {accessories::%uuid of {_player}%::items::3} to slot 21 of {_player}'s current inventory
		set {accessories::%uuid of {_player}%::items::4} to slot 23 of {_player}'s current inventory







